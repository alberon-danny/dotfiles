#!/usr/bin/env php
<?php

$vendorPath = __DIR__;
while(!file_exists($vendorPath.DIRECTORY_SEPARATOR.'vendor') && strlen($vendorPath) > 0) {
	$vendorPath = dirname($vendorPath);
}
require $vendorPath.DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';

function human_size($bytes, $decimals = 2){
	$size = array('B','kB','MB','GB','TB','PB','EB','ZB','YB');
	$factor = floor((strlen($bytes) - 1) / 3);
	return sprintf("%.{$decimals}f", $bytes / pow(1024, $factor)) . @$size[$factor];
}

// /etc/systemd/system/test@.service
$name = $argv[1];
echo "Running as '$name'\n";

$running = true;
$sleepTime = 1;
$start = microtime(true);
$slept = 0;
$nextTick = $start;

$tasks = new \Danny\Scripts\Daemon\TaskManager();
$ui = new \Danny\Scripts\Daemon\UI();
$ui->bind();

$tasks->onComplete(function($name, $task) use($ui) {
    $ui->writeLine("Completed: ".$name);
});

$tasks->runTask('timer', function() use($start, $sleepTime, $ui, &$nextTick, $tasks) {
	$time = microtime(true) - $start;
	$mem = memory_get_usage();
	$peak = memory_get_peak_usage();

	if (microtime(true) >= $nextTick) {
		$ui->setStatus('mem usage: '.human_size($mem).' / '.human_size($peak).' ['.$tasks->countRunningTasks().' tasks]');
		$nextTick = microtime(true) + $sleepTime;
	}
});

/*
 * CREATE YOUR OWN CA:
 * https://gist.github.com/fntlnz/cf14feb5a46b2eda428e000157447309
 */
/*$tasks->runTask('websocket-server', function() use($running, $ui) {
    // secure - not yet working
     $server = new \DannyCain\Net\Base\Server(\DannyCain\Net\WebSockets\Server\WebSocketServerConnection::class, 8080, true, '0.0.0.0', dirname(__DIR__).'/cert/social.brill.alberon.co.uk.crt', '', dirname(__DIR__).'/cert/social.brill.alberon.co.uk.key');
    // insecure - works
//    $server = new \DannyCain\Net\Base\Server(\DannyCain\Net\WebSockets\Server\WebSocketServerConnection::class, 8080, true, '0.0.0.0', dirname(__DIR__).'/cert/new.cert.cert', '', dirname(__DIR__).'/cert/new.cert.key');

    $server->onError(function(\DannyCain\Net\Base\Models\ServerConnection $conn, Exception $e) use($ui) {
        $ui->writeLine($e->getMessage());
    });

    $server->onConnection(function(\DannyCain\Net\WebSockets\Server\WebSocketServerConnection $conn) use($ui) {
        $ui->writeLine("Connected");
    });

    $server->onClose(function(\DannyCain\Net\Base\Models\ServerConnection $conn) use($ui) {
        $ui->writeLine("Closed");
    });

    $server->onMessage(function(\DannyCain\Net\WebSockets\Server\WebSocketServerConnection $conn, $message) use($server) {
        $payload = '';
        foreach($message->getPayload() as $chunk) {
            $payload .= $chunk;
        }
        $payload = json_decode($payload, true);

        $conn->send(new \DannyCain\Net\WebSockets\Models\WebSocketMessageModel(function() use($payload) {
            yield json_encode($payload);
        }));

        echo $conn->getHost().$conn->getUri().": ".$payload['message']."\n";
    });

    yield;
    $server->listen();
    while($running) {
        $server->tick();
        yield;
    }
    $server->close();
});*/

$lastSpoke = time();
$lastTriggered = time();

$tasks->runTask('disk-watcher', function(&$complete = false) use($ui) {
    static $disk_usage = [];
    static $next_tick = 0;

    if (time() < $next_tick)
        return;

    $next_tick = time() + 30;
    $disks = [
        "/dev/mapper/ubuntu--vg-root"
    ];
    exec("df -h", $output);
    array_shift($output);

    foreach($output as $line) {
        $fields = preg_split("/\s+/", $line);
        /*
         * 0 = filesystem
         * 1 = size
         * 2 = used
         * 3 = avail
         * 4 = use%
         * 5 = mounted on
         */
        if (!in_array($fields[0], $disks, true))
            continue;

        if (!isset($disk_usage[$fields[0]]))
            $disk_usage[$fields[0]] = 0;

        if ($fields[3] !== $disk_usage[$fields[0]]) {
            $ui->writeLine($fields[0].' has '.$fields[3].' remaining');
        }
        $disk_usage[$fields[0]] = $fields[3];
    }
});

$tasks->runTask('completable-closure', function(&$complete = false) use($start) {
    if (time() - $start >= 30)
        $complete = true;

    return $complete;
});

$tasks->runTask('completable-generator', function() use($start) {
    while(time() - $start < 15) {
        yield;
    }
});

$tasks->run();

function triggeredTask() {
    global $ui;

    $start = time();
    
	$ui->writeLine("--waking up triggered task, hourly check");
	yield;
	while(time() - $start < 500) {
	    yield;
    }
    $ui->writeLine("triggered task finished");
}