#!/usr/bin/env php
<?php

$vendorPath = __DIR__;
while(!file_exists($vendorPath.DIRECTORY_SEPARATOR.'vendor') && strlen($vendorPath) > 0) {
    $vendorPath = dirname($vendorPath);
}
require $vendorPath.DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';

$script = array_shift($argv);
$path = array_shift($argv);
if (!$path)
    $path = getcwd();
else
    $path = realpath($path);

interface Disposable {
    function dispose();
}

class CLIIntrospectObserver implements \DannyCain\Introspect\Observers\PHPParserObserver, Disposable {
    protected $file = '';
    protected $namespace = '';
    protected $class = '';
    protected $function = '';

    function startFile( $filename = '' ) {
        $this->file = $filename;
        $this->namespace = '';
        $this->class = '';
        $this->function = '';
        echo $filename."\n";
    }

    function startNamespace( $namespace ) {
        $this->namespace = $namespace;
        $this->class = '';
        $this->function = '';
    }

    function startClass( $class, $interfaces = [], $baseClass = '' ) {
        $this->class = $class;
        $this->function = '';
    }

    function startInterface( $interface, $extends = [] ) {
        $this->class = $interface;
        $this->function = '';
    }

    function startFunction( $function, $arguments ) {
        $this->function = $function;
        echo "\t".$this->namespace.'\\'.$this->class.'::'.$function."\n";
    }

    function endBlock() {
        if ($this->function != '')
            $this->function = '';
        elseif($this->class != '')
            $this->class = '';
        elseif($this->namespace != '')
            $this->namespace = '';
    }

    function dispose() {
        // TODO: Implement dispose() method.
    }
}

class JSONIntrospectObserver implements \DannyCain\Introspect\Observers\PHPParserObserver, Disposable {
    private $tree = [];
    protected $file = '';
    protected $namespace = '';
    protected $class = '';
    protected $function = '';

    private function deepSet($array, $keys, $val) {
        $key = array_shift($keys);
        if (count($keys) === 0) {
            $array[$key] = $val;
        } else {
            $array[$key] = $this->deepSet($array[$key], $keys, $val);
        }
        return $array;
    }

    function startFile( $filename = '' ) {
        $root = getcwd();
        if (substr($filename, 0, strlen($root)) === strlen($root)) {
            $filename = substr($filename, strlen($root));
            if (substr($filename, 0, 1) === '/')
                $filename = substr($filename, 1);
        }

        $this->file = $filename;
        $this->namespace = '';
        $this->class = '';
        $this->function = '';
    }

    function startNamespace( $namespace ) {
        $this->namespace = $namespace;
        $this->class = '';
        $this->function = '';
    }

    function startClass( $class, $interfaces = [], $baseClass = '' ) {
        $this->class = $class;
        $this->function = '';
    }

    function startInterface( $interface, $extends = [] ) {
        $this->class = $interface;
        $this->function = '';
    }

    function startFunction( $function, $arguments ) {
        $this->function = $function;

        $keys = [$this->file, $this->namespace, $this->class, $function];
        $this->tree = $this->deepSet($this->tree, $keys, $arguments);
    }

    function endBlock() {
        if ($this->function != '')
            $this->function = '';
        elseif($this->class != '')
            $this->class = '';
        elseif($this->namespace != '')
            $this->namespace = '';
    }

    function dispose() {
        echo json_encode($this->tree, JSON_PRETTY_PRINT);
    }
}

$opt = getopt('', [
    'json'
]);
if (isset($opt['json'])) {
    $observer = new JSONIntrospectObserver();
} else {
    $observer = new CLIIntrospectObserver();
}

$parser = new \DannyCain\Introspect\Parsing\PHPParser($observer);
$parser->parseFiles($path);
$observer->dispose();
