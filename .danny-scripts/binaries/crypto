#!/usr/bin/env php
<?php

use DannyCain\Crypto\Asymmetric\OpenSSLAsymmetricCrypto;
use DannyCain\Crypto\Crypto;
use DannyCain\Crypto\Symmetric\DefuseSymmetricEncryption;

$vendorPath = __DIR__;
while(!file_exists($vendorPath.DIRECTORY_SEPARATOR.'vendor') && strlen($vendorPath) > 0) {
	$vendorPath = dirname($vendorPath);
}
require $vendorPath.DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';

function requestPassphrase() {
	echo "Enter passphrase:";
	system('stty -echo');
	$passphrase = trim(fgets(STDIN));
	system('stty echo');
	echo "\n";
	return $passphrase;
}

$symmetric = new DefuseSymmetricEncryption();
$asymmetric = new OpenSSLAsymmetricCrypto();
$crypto = new Crypto($symmetric, $asymmetric);

$opts = getopt('h', array(
	'generate:',
	'key:',
	'encrypt:',
	'decrypt:',
    'help'
));

if (isset($opts['h']) || isset($opts['help'])) {
    echo "File encryption / decryption\n";
    echo "Usage: \n";
    echo "\tcrypto --encrypt {file} --key {public_key}\n";
    echo "\tcrypto --decrypt {file} --key {private_key}\n";
    echo "\tcrypto --generate {key_filename}\n";
    exit;
}

if (isset($opts['generate'])) {
	$passphrase = requestPassphrase();
	$keys = $asymmetric->generateKeyPair($passphrase);
	file_put_contents($opts['generate'].'.private', $keys['private']);
	file_put_contents($opts['generate'].'.public', $keys['public']);
	exit;
}

if (!isset($opts['key'])) {
	echo "Must specify a key\n";
	exit;
}

if (!isset($opts['encrypt']) && !isset($opts['decrypt'])) {
	echo "Must choose an action\n";
	exit;
}

$key = file_get_contents($opts['key']);
$passphrase = '';
if (isset($opts['decrypt']) && strpos($key, 'ENCRYPTED') !== false) {
	$passphrase = requestPassphrase();
}

if (isset($opts['encrypt'])) {
	$crypto->encodeStream(fopen($opts['encrypt'], 'r'), STDOUT, $key, 1024);
} else {
	$crypto->decodeStream(fopen($opts['decrypt'], 'r'), STDOUT, $key, $passphrase);
}
echo "Done\n";
