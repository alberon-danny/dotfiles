#!/usr/bin/env php
<?php

use Danny\Scripts\Crawler\Crawler;
use Danny\Scripts\Crawler\Listener\CrawlerListener;
use Danny\Scripts\Crawler\Listener\TextLogCrawlerListener;
use Danny\Scripts\Crawler\Models\URL;
use Danny\Scripts\LogWatch\Watcher;
use DannyCain\HTTPConfig\Parser;

$vendorPath = __DIR__;
while(!file_exists($vendorPath.DIRECTORY_SEPARATOR.'vendor') && strlen($vendorPath) > 0) {
	$vendorPath = dirname($vendorPath);
}
require $vendorPath.DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';

class MixedContentListener implements CrawlerListener {
    protected $mixedMode = [];
    protected $links = [];
    protected $httpError = [];
    protected $verbosity = 0;
    protected $count = 0;
    protected $max = 0;
    protected $status = '';

    function clearStatus() {
        for($i = 0; $i < strlen($this->status); $i ++) {
            echo chr(8);
        }
	    for($i = 0; $i < strlen($this->status); $i ++) {
		    echo " ";
	    }
	    for($i = 0; $i < strlen($this->status); $i ++) {
		    echo chr(8);
	    }

        $this->status = '';
    }

    function writeStatus($status) {
        $this->clearStatus();
        $this->status = $status;
        echo $this->status;
    }

	function scan( URL $url ) {
		if ($this->max > 0 && $this->count >= $this->max) {
			return false;
		}

		if ($url->getProtocol() === 'http') {
		    return false;
        }
        
		$this->count ++;
		if ($this->max > 0) {
			$this->writeStatus("Scanned ".$this->count." / ".$this->max." urls");
        } else {
			$this->writeStatus("Scanned ".$this->count." urls");
        }
        return true;
	}

	/**
	 * @return int
	 */
	public function getMax(): int {
		return $this->max;
	}

	/**
	 * @param int $max
	 */
	public function setMax( int $max ): void {
		$this->max = $max;
	}

	/**
	 * @return int
	 */
	public function getCount(): int {
		return $this->count;
	}

	function foundURL( URL $sourcePage, URL $url, $tagName = '' ) {
        if ($url->getProtocol() === 'http') {
            switch($tagName) {
                case 'a':
                case 'form':
                    if (!isset($this->links[(string)$sourcePage]))
                        $this->links[(string)$sourcePage] = [];
                    $this->links[(string)$sourcePage][] = (string)$url;
                    break;
                default:
	                if (!isset($this->mixedMode[(string)$sourcePage]))
		                $this->mixedMode[(string)$sourcePage] = [];
	                $this->mixedMode[(string)$sourcePage][] = (string)$url;
                    break;
            }
        }
	}

	function failedToRetrieve( URL $url, $response_code ) {
        if (!isset($this->httpError[$response_code]))
            $this->httpError[$response_code] = [];
        $this->httpError[$response_code][] = (string)$url;
	}

	function foundRedirect( URL $sourcePage, URL $url ) {

	}

	/**
	 * @return array
	 */
	public function getMixedMode(): array {
		return $this->mixedMode;
	}

	/**
	 * @return array
	 */
	public function getLinks(): array {
		return $this->links;
	}

	/**
	 * @return array
	 */
	public function getHttpError(): array {
		return $this->httpError;
	}

	/**
	 * @return int
	 */
	public function getVerbosity(): int {
		return $this->verbosity;
	}

	/**
	 * @param int $verbosity
	 */
	public function setVerbosity( int $verbosity ): void {
		$this->verbosity = $verbosity;
	}

}


$options = getopt('v', ['domain:', 'max:']);
if (!isset($options['domain'])) {
	echo "Must specify domain\n";
	exit;
}

$domain = $options['domain'];
if (strpos($domain, '://') === false) {
    $domain = 'https://'.$domain;
}

$listener = new MixedContentListener();
$crawler = new Crawler($listener);
if (isset($options['v'])) {
    if (!is_array($options['v']))
        $listener->setVerbosity(1);
    else
        $listener->setVerbosity(count($options['v']));
}

if (isset($options['max'])) {
    $listener->setMax(intval($options['max']));
} else {
    $listener->setMax(200);
}

try {
	$crawler->crawl(URL::Parse($domain));
	$listener->clearStatus();
} catch(RuntimeException $e) {
	$listener->clearStatus();
    if ($e->getMessage() == 'abort') {
        echo "Max crawl limit reached\n";
    } else {
        throw $e;
    }
}


foreach($listener->getLinks() as $page => $links) {
    echo "Links on '$page'\n";
    echo "\t".implode("\n\t", $links)."\n";
}

foreach($listener->getMixedMode() as $page => $resources) {
    echo "MixedMode resources on '$page'\n";
    echo "\t".implode("\n\t", $resources)."\n";
}

foreach($listener->getHttpError() as $error_code => $pages) {
    echo "HTTP '$error_code' responses\n";
    echo "\t".implode("\n\t", $pages)."\n";
}